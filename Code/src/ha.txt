    /*
        Note, following does not work!
        doc[F("key")] = F("Value")
        String s; doc[s] = ...
        Throws all kind of errors. String throws stack smashing.
    */
    
    void setupHA()
    {
        //HeapSelectIram ephemeral;
        //HeapSelectDram ephemeral;


        
        /* Save RAM by storing strings in FLASH */

        PGM_P fs_dev = PSTR("dev");
        PGM_P fs_name = PSTR("name");
        PGM_P fs_uniq_id = PSTR("uniq_id");
        PGM_P fs_stat_t = PSTR("stat_t");
        PGM_P fs_avty_t = PSTR("avty_t");
        PGM_P fs_pl_avail = PSTR("pl_avail");
        PGM_P fs_pl_not_avail = PSTR("pl_not_avail");
        PGM_P fs_val_tpl = PSTR("val_tpl");
        PGM_P fs_cmd_t = PSTR("cmd_t");
        PGM_P fs_cmd_tpl = PSTR("cmd_tpl");
        PGM_P fs_conf_url = PSTR("configuration_url");
        PGM_P fs_connections = PSTR("connections");
        PGM_P fs_identifiers = PSTR("identifiers");
        PGM_P fs_manufacturer = PSTR("manufacturer");
        PGM_P fs_model = PSTR("model");
        PGM_P fs_sw_v = PSTR("sw_version");
        PGM_P fs_alive = PSTR("Alive");
        PGM_P fs_dead = PSTR("Dead");

        PGM_P fs_max_temp = PSTR("max_temp");
        PGM_P fs_min_temp = PSTR("min_temp");
        PGM_P fs_precision = PSTR("precision");
        PGM_P fs_temp_unit = PSTR("temp_unit");
        PGM_P fs_modes = PSTR("modes");
        PGM_P fs_mode_cmd_t = PSTR("mode_cmd_t");
        PGM_P fs_mode_cmd_tpl = PSTR("mode_cmd_tpl");
        PGM_P fs_mode_stat_t = PSTR("mode_stat_t");
        PGM_P fs_mode_stat_tpl = PSTR("mode_stat_tpl");
        PGM_P fs_act_t = PSTR("act_t");
        PGM_P fs_act_tpl = PSTR("act_tpl");
        PGM_P fs_temp_stat_t = PSTR("temp_stat_t");
        PGM_P fs_temp_stat_tpl = PSTR("temp_stat_tpl");
        PGM_P fs_curr_temp_t = PSTR("curr_temp_t");
        PGM_P fs_curr_temp_tpl = PSTR("curr_temp_tpl");
        PGM_P fs_temp_cmd_t = PSTR("temp_cmd_t");
        PGM_P fs_temp_cmd_tpl = PSTR("temp_cmd_tpl");

        PGM_P fs_expire_after = PSTR("expire_after");
        PGM_P fs_unit_of_meas = PSTR("unit_of_meas");
        PGM_P fs_dev_cla = PSTR("dev_cla");
    

        /* ArduinoJson crashes when using flash strings on both sides
           so here we pull them back to a String in RAM temporarily. */

        char _dev[32];
        char _name[32];
        char _uniq_id[32];
        char _stat_t[32]; 
        char _avty_t[32];
        char _pl_avail[32]; 
        char _pl_not_avail[32];
        char _val_tpl[32]; 
        char _cmd_t[32];
        char _cmd_tpl[32]; 
        char _conf_url[32];
        char _connections[32];
        char _identifiers[32];
        char _manufacturer[32];
        char _model[32];
        char _sw_v[32];
        char _alive[32];
        char _dead[32]; 

        char _max_temp[32];
        char _min_temp[32];
        char _precision[32];
        char _temp_unit[32];
        char _modes[32];
        char _mode_cmd_t[32];
        char _mode_cmd_tpl[32];
        char _mode_stat_t[32];
        char _mode_stat_tpl[32];
        char _act_t[32];
        char _act_tpl[32];
        char _temp_stat_t[32];
        char _temp_stat_tpl[32];
        char _curr_temp_t[32];
        char _curr_temp_tpl[32];
        char _temp_cmd_t[32];
        char _temp_cmd_tpl[32];

        char _expire_after[32];
        char _unit_of_meas[32];
        char _dev_cla[32];


        strcpy_P(_dev, fs_dev);
        strcpy_P(_name, fs_name);
        strcpy_P(_uniq_id, fs_uniq_id);
        strcpy_P(_stat_t, fs_stat_t);
        strcpy_P(_avty_t, fs_avty_t);
        strcpy_P(_pl_avail, fs_pl_avail);
        strcpy_P(_pl_not_avail, fs_pl_not_avail);
        strcpy_P(_val_tpl, fs_val_tpl);
        strcpy_P(_cmd_t, fs_cmd_t);
        strcpy_P(_cmd_tpl, fs_cmd_tpl);
        strcpy_P(_conf_url, fs_conf_url);
        strcpy_P(_connections, fs_connections);
        strcpy_P(_identifiers, fs_identifiers);
        strcpy_P(_manufacturer, fs_manufacturer);
        strcpy_P(_model, fs_model);
        strcpy_P(_sw_v, fs_sw_v);
        strcpy_P(_alive, fs_alive);
        strcpy_P(_dead, fs_dead);

        strcpy_P(_max_temp, fs_max_temp);
        strcpy_P(_min_temp, fs_min_temp);
        strcpy_P(_precision, fs_precision);
        strcpy_P(_temp_unit, fs_temp_unit);
        strcpy_P(_modes, fs_modes);
        strcpy_P(_mode_cmd_t, fs_mode_cmd_t);
        strcpy_P(_mode_cmd_tpl, fs_mode_cmd_tpl);
        strcpy_P(_mode_stat_t, fs_mode_stat_t);
        strcpy_P(_mode_stat_tpl, fs_mode_stat_tpl);
        strcpy_P(_act_t, fs_act_t);
        strcpy_P(_act_tpl, fs_act_tpl);
        strcpy_P(_temp_stat_t, fs_temp_stat_t);
        strcpy_P(_temp_stat_tpl, fs_temp_stat_tpl);
        strcpy_P(_curr_temp_t, fs_curr_temp_t);
        strcpy_P(_curr_temp_tpl, fs_curr_temp_tpl);
        strcpy_P(_temp_cmd_t, fs_temp_cmd_t);
        strcpy_P(_temp_cmd_tpl, fs_temp_cmd_tpl);

        strcpy_P(_expire_after, fs_expire_after);
        strcpy_P(_unit_of_meas, fs_unit_of_meas);
        strcpy_P(_dev_cla, fs_dev_cla);

        /* DEVICE */
        /*
        if(!mqttClient->connected()){
            String s = F("HA setup failed. MQTT not connected");
            bwc->saveDebugInfo(s);
            return;
        }
        */
        String topic;
        String payload;
        payload.reserve(1300);
        #if defined(ESP8266)
        String mychipid = String((unsigned int)ESP.getChipId());
        #elif defined(ESP32)
        String mychipid = String((unsigned int)ESP.getChipModel());
        #endif
        int maxtemp, mintemp;
        maxtemp = 104;
        mintemp = 68;
        DynamicJsonDocument devicedoc(1024);
        devicedoc[_dev][_conf_url] = F("http://") + WiFi.localIP().toString();
        devicedoc[(_dev)][(_connections)].add(serialized("[\"mac\",\"" + WiFi.macAddress()+"\"]" ));
        devicedoc[(_dev)][(_identifiers)] = mychipid;
        devicedoc[(_dev)][(_manufacturer)] = F("Visualapproach");
        devicedoc[(_dev)][(_model)] = bwc->getModel();
        devicedoc[(_dev)][(_name)] = mqttBaseTopic + F(" WiFi controller");
        devicedoc[(_dev)][(_sw_v)] = FW_VERSION;


        DynamicJsonDocument doc(2048);
        /************/
        /* NUMBER   */
        /************/

                                        /* brightness slider */
        doc[(_dev)] = devicedoc[(_dev)];
        payload.clear();
        topic = F(HA_PREFIX);
        topic += F("/number/");
        topic += mqttBaseTopic;
        topic += F("_brightness/config");
        // Serial.println(topic);
        doc[(_name)] = mqttBaseTopic + F(" brightness");
        doc[(_uniq_id)] = F("input_number.") + mqttBaseTopic + F("_brightness")+mychipid;
        doc[(_stat_t)] = mqttBaseTopic+F("/message");
        doc[(_avty_t)] = mqttBaseTopic+F("/Status");
        doc[(_pl_avail)] = _alive;
        doc[(_pl_not_avail)] = _dead;
        doc[(_val_tpl)] = F("{{ value_json.BRT }}");
        doc[(_cmd_t)] = mqttBaseTopic+F("/command");
        doc[(_cmd_tpl)] = F("{CMD:12,VALUE:{{ value | int }},XTIME:0,INTERVAL:0}");
        doc["min"] = 0;
        doc["max"] = 8;
        doc["mode"] = F("slider");
        if (serializeJson(doc, payload) == 0)
        {
            // Serial.println(F("Failed to serialize HA message!"));
            return;
        }
        mqttClient->publish(topic.c_str(), payload.c_str(), true);
        mqttClient->loop();
        // Serial.println(payload);
        doc.clear();
        doc.garbageCollect();


        /************/
        /* SENSORS  */
        /************/

    Serial.println(F("sensors"));
                                        /* pressed button sensor */
    doc[(_dev)] = devicedoc[(_dev)];
    payload.clear();
    topic = F(HA_PREFIX);
    topic += F("/sensor/");
    topic += mqttBaseTopic;
    topic += F("_pressed_button/config");
    doc[(_name)] = mqttBaseTopic + F(" pressed button");
    doc[(_uniq_id)] = F("sensor.") + mqttBaseTopic + F("_pressed_button")+mychipid;
    doc[(_stat_t)] = mqttBaseTopic+F("/button");
    doc[(_avty_t)] = mqttBaseTopic+F("/Status");
    doc[(_pl_avail)] = _alive;
    doc[(_pl_not_avail)] = _dead;

    if (serializeJson(doc, payload) == 0)
    {
        // Serial.println(F("Failed to serialize HA message!"));
        return;
    }

    mqttClient->publish(topic.c_str(), payload.c_str(), true);
    mqttClient->loop();
    // Serial.println(payload);
    doc.clear();
    doc.garbageCollect();




                                        /* reboot time sensor */
    doc[(_dev)] = devicedoc[(_dev)];
    payload.clear();
    topic = F(HA_PREFIX);
    topic += F("/sensor/");
    topic += mqttBaseTopic;
    topic += F("_reboot_time/config");
    doc[(_name)] = mqttBaseTopic + F(" reboot time");
    doc[(_uniq_id)] = F("sensor.") + mqttBaseTopic + F("_reboot_time")+mychipid;
    doc[(_stat_t)] = mqttBaseTopic+F("/reboot_time");
    doc[(_val_tpl)] = F("{{as_timestamp(as_datetime(value).isoformat()) | timestamp_custom('%F %T')}}");
    doc[(_avty_t)] = mqttBaseTopic+F("/Status");
    doc[(_pl_avail)] = _alive;
    doc[(_pl_not_avail)] = _dead;
    if (serializeJson(doc, payload) == 0)
    {
        // Serial.println(F("Failed to serialize HA message!"));
        return;
    }
    mqttClient->publish(topic.c_str(), payload.c_str(), true);
    mqttClient->loop();
    // Serial.println(payload);
    doc.clear();
    doc.garbageCollect();



                                        /* reboot reason sensor */
    doc[(_dev)] = devicedoc[(_dev)];
    payload.clear();
    topic = F(HA_PREFIX);
    topic += F("/sensor/");
    topic += mqttBaseTopic;
    topic += F("_reboot_reason/config");
    doc[(_name)] = mqttBaseTopic + F(" reboot reason");
    doc[(_uniq_id)] = F("sensor.") + mqttBaseTopic + F("_reboot_reason")+mychipid;
    doc[(_stat_t)] = mqttBaseTopic+F("/reboot_reason");
    doc[(_avty_t)] = mqttBaseTopic+F("/Status");
    doc[(_pl_avail)] = _alive;
    doc[(_pl_not_avail)] = _dead;
    if (serializeJson(doc, payload) == 0)
    {
        // Serial.println(F("Failed to serialize HA message!"));
        return;
    }
    mqttClient->publish(topic.c_str(), payload.c_str(), true);
    mqttClient->loop();
    // Serial.println(payload);
    doc.clear();
    doc.garbageCollect();



                                        /* WiFi SSID sensor */
    doc[(_dev)] = devicedoc[(_dev)];
    payload.clear();
    topic = F(HA_PREFIX);
    topic += F("/sensor/");
    topic += mqttBaseTopic;
    topic += F("_ssid/config");
    doc[(_name)] = mqttBaseTopic + F(" ssid");
    doc[(_uniq_id)] = F("sensor.") + mqttBaseTopic + F("_ssid")+mychipid;
    doc[(_stat_t)] = mqttBaseTopic+F("/other");
    doc[(_val_tpl)] = F("{{ value_json.SSID }}");
    doc[_expire_after] = 700;
    doc[(_avty_t)] = mqttBaseTopic+F("/Status");
    doc[(_pl_avail)] = _alive;
    doc[(_pl_not_avail)] = _dead;
    if (serializeJson(doc, payload) == 0)
    {
        // Serial.println(F("Failed to serialize HA message!"));
        return;
    }
    mqttClient->publish(topic.c_str(), payload.c_str(), true);
    mqttClient->loop();
    // Serial.println(payload);
    doc.clear();
    doc.garbageCollect();


                                        /* WiFi RSSI sensor */
    doc[(_dev)] = devicedoc[(_dev)];
    payload.clear();
    topic = F(HA_PREFIX);
    topic += F("/sensor/");
    topic += mqttBaseTopic;
    topic += F("_rssi/config");
    doc[(_name)] = mqttBaseTopic + F(" rssi");
    doc[(_uniq_id)] = F("sensor.") + mqttBaseTopic + F("_rssi")+mychipid;
    doc[(_stat_t)] = mqttBaseTopic+F("/other");
    doc[_unit_of_meas] = F("dBm");
    doc[(_val_tpl)] = F("{{ value_json.RSSI }}");
    doc[_expire_after] = 700;
    doc[(_avty_t)] = mqttBaseTopic+F("/Status");
    doc[(_pl_avail)] = _alive;
    doc[(_pl_not_avail)] = _dead;
    if (serializeJson(doc, payload) == 0)
    {
        // Serial.println(F("Failed to serialize HA message!"));
        return;
    }
    mqttClient->publish(topic.c_str(), payload.c_str(), true);
    mqttClient->loop();
    // Serial.println(payload);
    doc.clear();
    doc.garbageCollect();



                                        /* WiFi local ip sensor */
    doc[(_dev)] = devicedoc[(_dev)];
    payload.clear();
    topic = F(HA_PREFIX);
    topic += F("/sensor/");
    topic += mqttBaseTopic;
    topic += F("_ip/config");
    doc[(_name)] = mqttBaseTopic + F(" ip");
    doc[(_uniq_id)] = F("sensor.") + mqttBaseTopic + F("_ip")+mychipid;
    doc[(_stat_t)] = mqttBaseTopic+F("/other");
    doc[(_val_tpl)] = F("{{ value_json.IP }}");
    doc[_expire_after] = 700;
    doc[(_avty_t)] = mqttBaseTopic+F("/Status");
    doc[(_pl_avail)] = _alive;
    doc[(_pl_not_avail)] = _dead;
    if (serializeJson(doc, payload) == 0)
    {
        // Serial.println(F("Failed to serialize HA message!"));
        return;
    }
    mqttClient->publish(topic.c_str(), payload.c_str(), true);
    mqttClient->loop();
    // Serial.println(payload);
    doc.clear();
    doc.garbageCollect();


                                        /* connect count sensor */
    doc[(_dev)] = devicedoc[(_dev)];
    payload.clear();
    topic = F(HA_PREFIX);
    topic += F("/sensor/");
    topic += mqttBaseTopic;
    topic += F("_connect_count/config");
    doc[(_name)] = mqttBaseTopic + F(" connect count");
    doc[(_uniq_id)] = F("sensor.") + mqttBaseTopic + F("_connect_count")+mychipid;
    doc[(_stat_t)] = mqttBaseTopic+F("/MQTT_Connect_Count");
    doc[(_avty_t)] = mqttBaseTopic+F("/Status");
    doc[(_pl_avail)] = _alive;
    doc[(_pl_not_avail)] = _dead;
    if (serializeJson(doc, payload) == 0)
    {
        // Serial.println(F("Failed to serialize HA message!"));
        return;
    }
    mqttClient->publish(topic.c_str(), payload.c_str(), true);
    mqttClient->loop();
    // Serial.println(payload);
    doc.clear();
    doc.garbageCollect();

                                        /* error sensor */
    doc[(_dev)] = devicedoc[(_dev)];
    payload.clear();
    topic = F(HA_PREFIX);
    topic += F("/sensor/");
    topic += mqttBaseTopic;
    topic += F("_error/config");
    doc[(_name)] = mqttBaseTopic + F(" error");
    doc[(_uniq_id)] = F("sensor.") + mqttBaseTopic + F("_error")+mychipid;
    doc[(_stat_t)] = mqttBaseTopic+F("/message");
    doc[(_val_tpl)] = F("{{ value_json.ERR }}");
    doc[_expire_after] = 700;
    doc[(_avty_t)] = mqttBaseTopic+F("/Status");
    doc[(_pl_avail)] = _alive;
    doc[(_pl_not_avail)] = _dead;
    if (serializeJson(doc, payload) == 0)
    {
        // Serial.println(F("Failed to serialize HA message!"));
        return;
    }
    mqttClient->publish(topic.c_str(), payload.c_str(), true);
    mqttClient->loop();
    // Serial.println(payload);
    doc.clear();
    doc.garbageCollect();




                                        /* spa time to ready sensor */
    doc[(_dev)] = devicedoc[(_dev)];
    payload.clear();
    topic = F(HA_PREFIX);
    topic += F("/sensor/");
    topic += mqttBaseTopic;
    topic += F("_time_to_ready/config");
    doc[(_name)] = mqttBaseTopic + F(" time to ready");
    doc[(_uniq_id)] = F("sensor.") + mqttBaseTopic + F("_time_to_ready")+mychipid;
    doc[(_stat_t)] = mqttBaseTopic+F("/times");
    doc[_unit_of_meas] = F("hours");
    doc[(_val_tpl)] = F("{{ value_json.T2R }}");
    doc[_expire_after] = 700;
    doc["icon"] = F("mdi:clock");
    doc[(_avty_t)] = mqttBaseTopic+F("/Status");
    doc[(_pl_avail)] = _alive;
    doc[(_pl_not_avail)] = _dead;
    if (serializeJson(doc, payload) == 0)
    {
        // Serial.println(F("Failed to serialize HA message!"));
        return;
    }
    mqttClient->publish(topic.c_str(), payload.c_str(), true);
    mqttClient->loop();
    // Serial.println(payload);
    doc.clear();
    doc.garbageCollect();



                                        /* Ready State sensor (Never, Ready, Not Ready) */
    doc[(_dev)] = devicedoc[(_dev)];
    payload.clear();
    topic = F(HA_PREFIX);
    topic += F("/sensor/");
    topic += mqttBaseTopic;
    topic += F("_rs/config");
    doc[(_name)] = mqttBaseTopic + F(" ready state");
    doc[(_uniq_id)] = F("sensor.") + mqttBaseTopic + F("_rs")+mychipid;
    doc[(_stat_t)] = mqttBaseTopic+F("/times");
    doc[(_val_tpl)] = F("{{ value_json.RS }}");
    doc[_expire_after] = 700;
    doc[(_avty_t)] = mqttBaseTopic+F("/Status");
    doc[(_pl_avail)] = _alive;
    doc[(_pl_not_avail)] = _dead;
    if (serializeJson(doc, payload) == 0)
    {
        // Serial.println(F("Failed to serialize HA message!"));
        return;
    }
    mqttClient->publish(topic.c_str(), payload.c_str(), true);
    mqttClient->loop();
    // Serial.println(payload);
    doc.clear();
    doc.garbageCollect();




                                        /* spa energy sensor */
    doc[(_dev)] = devicedoc[(_dev)];
    payload.clear();
    topic = F(HA_PREFIX);
    topic += F("/sensor/");
    topic += mqttBaseTopic;
    topic += F("_energy/config");
    doc[(_name)] = mqttBaseTopic + F(" energy");
    doc[(_uniq_id)] = F("sensor.") + mqttBaseTopic + F("_energy")+mychipid;
    doc[(_stat_t)] = mqttBaseTopic+F("/times");
    doc[_unit_of_meas] = F("kWh");
    doc[(_val_tpl)] = F("{{ value_json.KWH | round(3) }}");
    doc[_dev_cla] = F("energy");
    doc["state_class"] = F("total_increasing");
    doc[_expire_after] = 700;
    doc["icon"] = F("mdi:flash");
    doc[(_avty_t)] = mqttBaseTopic+F("/Status");
    doc[(_pl_avail)] = _alive;
    doc[(_pl_not_avail)] = _dead;
    if (serializeJson(doc, payload) == 0)
    {
        // Serial.println(F("Failed to serialize HA message!"));
        return;
    }
    mqttClient->publish(topic.c_str(), payload.c_str(), true);
    mqttClient->loop();
    // Serial.println(payload);
    doc.clear();
    doc.garbageCollect();


                                        /* spa daily energy sensor */
    doc[(_dev)] = devicedoc[(_dev)];
    payload.clear();
    topic = F(HA_PREFIX);
    topic += F("/sensor/");
    topic += mqttBaseTopic;
    topic += F("_today/config");
    doc[(_name)] = mqttBaseTopic + F(" today");
    doc[(_uniq_id)] = F("sensor.") + mqttBaseTopic + F("_today")+mychipid;
    doc[(_stat_t)] = mqttBaseTopic+F("/times");
    doc[_unit_of_meas] = F("kWh");
    doc[(_val_tpl)] = F("{{ value_json.KWHD | round(3) }}");
    doc[_dev_cla] = F("energy");
    doc["state_class"] = F("total_increasing");
    doc[_expire_after] = 700;
    doc["icon"] = F("mdi:flash");
    doc[(_avty_t)] = mqttBaseTopic+F("/Status");
    doc[(_pl_avail)] = _alive;
    doc[(_pl_not_avail)] = _dead;
    if (serializeJson(doc, payload) == 0)
    {
        // Serial.println(F("Failed to serialize HA message!"));
        return;
    }
    mqttClient->publish(topic.c_str(), payload.c_str(), true);
    mqttClient->loop();
    // Serial.println(payload);
    doc.clear();
    doc.garbageCollect();



                                        /* spa power sensor */
    doc[(_dev)] = devicedoc[(_dev)];
    payload.clear();
    topic = F(HA_PREFIX);
    topic += F("/sensor/");
    topic += mqttBaseTopic;
    topic += F("_power/config");
    doc[(_name)] = mqttBaseTopic + F(" power");
    doc[(_uniq_id)] = F("sensor.") + mqttBaseTopic + F("_power")+mychipid;
    doc[(_stat_t)] = mqttBaseTopic+F("/times");
    doc[_unit_of_meas] = F("W");
    doc[(_val_tpl)] = F("{{ value_json.WATT | int }}");
    doc[_dev_cla] = F("power");
    doc["state_class"] = F("measurement");
    doc[_expire_after] = 700;
    doc["icon"] = F("mdi:flash");
    doc[(_avty_t)] = mqttBaseTopic+F("/Status");
    doc[(_pl_avail)] = _alive;
    doc[(_pl_not_avail)] = _dead;
    if (serializeJson(doc, payload) == 0)
    {
        // Serial.println(F("Failed to serialize HA message!"));
        return;
    }
    mqttClient->publish(topic.c_str(), payload.c_str(), true);
    mqttClient->loop();
    // Serial.println(payload);
    doc.clear();
    doc.garbageCollect();



                                        /* spa chlorine age sensor */
    doc[(_dev)] = devicedoc[(_dev)];
    payload.clear();
    topic = F(HA_PREFIX);
    topic += F("/sensor/");
    topic += mqttBaseTopic;
    topic += F("_chlorine_age/config");
    doc[(_name)] = mqttBaseTopic + F(" chlorine age");
    doc[(_uniq_id)] = F("sensor.") + mqttBaseTopic + F("_chlorine_age")+mychipid;
    doc[(_stat_t)] = mqttBaseTopic+F("/times");
    doc[_unit_of_meas] = F("days");
    doc[(_val_tpl)] = F("{{ ( ( (now().timestamp()|int) - value_json.CLTIME|int)/3600/24) | round(2) }}");
    doc[_expire_after] = 700;
    doc["icon"] = F("hass:hand-coin-outline");
    doc[(_avty_t)] = mqttBaseTopic+F("/Status");
    doc[(_pl_avail)] = _alive;
    doc[(_pl_not_avail)] = _dead;
    if (serializeJson(doc, payload) == 0)
    {
        // Serial.println(F("Failed to serialize HA message!"));
        return;
    }
    mqttClient->publish(topic.c_str(), payload.c_str(), true);
    mqttClient->loop();
    // Serial.println(payload);
    doc.clear();
    doc.garbageCollect();



                                        /* spa filter age sensor */
    doc[(_dev)] = devicedoc[(_dev)];
    payload.clear();
    topic = F(HA_PREFIX);
    topic += F("/sensor/");
    topic += mqttBaseTopic;
    topic += F("_filter_age/config");
    doc[(_name)] = mqttBaseTopic + F(" filter age");
    doc[(_uniq_id)] = F("sensor.") + mqttBaseTopic + F("_filter_age")+mychipid;
    doc[(_stat_t)] = mqttBaseTopic+F("/times");
    doc[_unit_of_meas] = F("days");
    doc[(_val_tpl)] = F("{{ ( ( (now().timestamp()|int) - value_json.FTIME|int)/3600/24) | round(2) }}");
    doc[_expire_after] = 700;
    doc["icon"] = F("hass:air-filter");
    doc[(_avty_t)] = mqttBaseTopic+F("/Status");
    doc[(_pl_avail)] = _alive;
    doc[(_pl_not_avail)] = _dead;
    if (serializeJson(doc, payload) == 0)
    {
        // Serial.println(F("Failed to serialize HA message!"));
        return;
    }
    mqttClient->publish(topic.c_str(), payload.c_str(), true);
    mqttClient->loop();
    // Serial.println(payload);
    doc.clear();
    doc.garbageCollect();


                                        /* spa uptime sensor */
    doc[(_dev)] = devicedoc[(_dev)];
    payload.clear();
    topic = F(HA_PREFIX);
    topic += F("/sensor/");
    topic += mqttBaseTopic;
    topic += F("_uptime/config");
    doc[(_name)] = mqttBaseTopic + F(" uptime");
    doc[(_uniq_id)] = F("sensor.") + mqttBaseTopic + F("_uptime")+mychipid;
    doc[(_stat_t)] = mqttBaseTopic+F("/times");
    doc[_unit_of_meas] = F("days");
    doc[(_val_tpl)] = F("{{ ( (value_json.UPTIME|int)/3600/24) | round(2) }}");
    doc[_expire_after] = 700;
    doc["icon"] = F("mdi:clock-outline");
    doc[(_avty_t)] = mqttBaseTopic+F("/Status");
    doc[(_pl_avail)] = _alive;
    doc[(_pl_not_avail)] = _dead;
    if (serializeJson(doc, payload) == 0)
    {
        // Serial.println(F("Failed to serialize HA message!"));
        return;
    }
    mqttClient->publish(topic.c_str(), payload.c_str(), true);
    mqttClient->loop();
    // Serial.println(payload);
    doc.clear();
    doc.garbageCollect();



                                        /* spa pump time sensor */
    doc[(_dev)] = devicedoc[(_dev)];
    payload.clear();
    topic = F(HA_PREFIX);
    topic += F("/sensor/");
    topic += mqttBaseTopic;
    topic += F("_pumptime/config");
    doc[(_name)] = mqttBaseTopic + F(" pump time");
    doc[(_uniq_id)] = F("sensor.") + mqttBaseTopic + F("_pumptime")+mychipid;
    doc[(_stat_t)] = mqttBaseTopic+F("/times");
    doc[_unit_of_meas] = F("hours");
    doc[(_val_tpl)] = F("{{ ( (value_json.PUMPTIME|int)/3600) | round(2) }}");
    doc[_expire_after] = 700;
    doc["icon"] = F("mdi:clock-outline");
    doc[(_avty_t)] = mqttBaseTopic+F("/Status");
    doc[(_pl_avail)] = _alive;
    doc[(_pl_not_avail)] = _dead;
    if (serializeJson(doc, payload) == 0)
    {
        // Serial.println(F("Failed to serialize HA message!"));
        return;
    }
    mqttClient->publish(topic.c_str(), payload.c_str(), true);
    mqttClient->loop();
    // Serial.println(payload);
    doc.clear();
    doc.garbageCollect();



                                        /* spa heater time sensor */
    doc[(_dev)] = devicedoc[(_dev)];
    payload.clear();
    topic = F(HA_PREFIX);
    topic += F("/sensor/");
    topic += mqttBaseTopic;
    topic += F("_heatertime/config");
    doc[(_name)] = mqttBaseTopic + F(" heater time");
    doc[(_uniq_id)] = F("sensor.") + mqttBaseTopic + F("_heatertime")+mychipid;
    doc[(_stat_t)] = mqttBaseTopic+F("/times");
    doc[_unit_of_meas] = F("hours");
    doc[(_val_tpl)] = F("{{ ( (value_json.HEATINGTIME|int)/3600) | round(2) }}");
    doc[_expire_after] = 700;
    doc["icon"] = F("mdi:clock-outline");
    doc[(_avty_t)] = mqttBaseTopic+F("/Status");
    doc[(_pl_avail)] = _alive;
    doc[(_pl_not_avail)] = _dead;
    if (serializeJson(doc, payload) == 0)
    {
        // Serial.println(F("Failed to serialize HA message!"));
        return;
    }
    mqttClient->publish(topic.c_str(), payload.c_str(), true);
    mqttClient->loop();
    // Serial.println(payload);
    doc.clear();
    doc.garbageCollect();



                                        /* spa air time sensor */
    doc[(_dev)] = devicedoc[(_dev)];
    payload.clear();
    topic = F(HA_PREFIX);
    topic += F("/sensor/");
    topic += mqttBaseTopic;
    topic += F("_airtime/config");
    doc[(_name)] = mqttBaseTopic + F(" air time");
    doc[(_uniq_id)] = F("sensor.") + mqttBaseTopic + F("_airtime")+mychipid;
    doc[(_stat_t)] = mqttBaseTopic+F("/times");
    doc[_unit_of_meas] = F("hours");
    doc[(_val_tpl)] = F("{{ ( (value_json.AIRTIME|int)/3600) | round(2) }}");
    doc[_expire_after] = 700;
    doc["icon"] = F("mdi:clock-outline");
    doc[(_avty_t)] = mqttBaseTopic+F("/Status");
    doc[(_pl_avail)] = _alive;
    doc[(_pl_not_avail)] = _dead;
    if (serializeJson(doc, payload) == 0)
    {
        // Serial.println(F("Failed to serialize HA message!"));
        return;
    }
    mqttClient->publish(topic.c_str(), payload.c_str(), true);
    mqttClient->loop();
    // Serial.println(payload);
    doc.clear();
    doc.garbageCollect();



                                        /* spa temperature sensor f */
    doc[(_dev)] = devicedoc[(_dev)];
    payload.clear();
    topic = F(HA_PREFIX);
    topic += F("/sensor/");
    topic += mqttBaseTopic;
    topic += F("_temperature_f/config");
    doc[(_name)] = mqttBaseTopic + F(" temp (F)");
    doc[(_uniq_id)] = F("sensor.") + mqttBaseTopic + F("_temp_f")+mychipid;
    doc[(_stat_t)] = mqttBaseTopic+F("/message");
    doc[_unit_of_meas] = "°F";
    doc[(_val_tpl)] = F("{{ value_json.TMPF }}");
    doc[_expire_after] = 700;
    doc[(_avty_t)] = mqttBaseTopic+F("/Status");
    doc[(_pl_avail)] = _alive;
    doc[(_pl_not_avail)] = _dead;
    doc[_dev_cla] = F("temperature");
    if (serializeJson(doc, payload) == 0)
    {
        // Serial.println(F("Failed to serialize HA message!"));
        return;
    }
    mqttClient->publish(topic.c_str(), payload.c_str(), true);
    mqttClient->loop();
    // Serial.println(payload);
    doc.clear();
    doc.garbageCollect();



                                        /* spa temperature sensor c */
    doc[(_dev)] = devicedoc[(_dev)];
    payload.clear();
    topic = F(HA_PREFIX);
    topic += F("/sensor/");
    topic += mqttBaseTopic;
    topic += F("_temp_c/config");
    doc[(_name)] = mqttBaseTopic + F(" temp (C)");
    doc[(_uniq_id)] = F("sensor.") + mqttBaseTopic + F("_temp_c")+mychipid;
    doc[(_stat_t)] = mqttBaseTopic+F("/message");
    doc[_unit_of_meas] = "°C";
    doc[(_val_tpl)] = F("{{ value_json.TMPC }}");
    doc[_expire_after] = 700;
    doc[(_avty_t)] = mqttBaseTopic+F("/Status");
    doc[(_pl_avail)] = _alive;
    doc[(_pl_not_avail)] = _dead;
    doc[_dev_cla] = F("temperature");
    if (serializeJson(doc, payload) == 0)
    {
        // Serial.println(F("Failed to serialize HA message!"));
        return;
    }
    mqttClient->publish(topic.c_str(), payload.c_str(), true);
    mqttClient->loop();
    // Serial.println(payload);
    doc.clear();
    doc.garbageCollect();



                                        /* spa virtual temperature sensor f */
    doc[(_dev)] = devicedoc[(_dev)];
    payload.clear();
    topic = F(HA_PREFIX);
    topic += F("/sensor/");
    topic += mqttBaseTopic;
    topic += F("_virtualtemp_f/config");
    doc[(_name)] = mqttBaseTopic + F(" virtual temp (F)");
    doc[(_uniq_id)] = F("sensor.") + mqttBaseTopic + F("_virtual_temp_f")+mychipid;
    doc[(_stat_t)] = mqttBaseTopic+F("/message");
    doc[_unit_of_meas] = "°F";
    doc[(_val_tpl)] = F("{{ value_json.VTMF | round(2) }}");
    doc[_expire_after] = 700;
    doc[(_avty_t)] = mqttBaseTopic+F("/Status");
    doc[(_pl_avail)] = _alive;
    doc[(_pl_not_avail)] = _dead;
    doc[_dev_cla] = F("temperature");
    if (serializeJson(doc, payload) == 0)
    {
        // Serial.println(F("Failed to serialize vtf"));
        return;
    }
    mqttClient->publish(topic.c_str(), payload.c_str(), true);
    mqttClient->loop();
    // Serial.println(payload);
    doc.clear();
    doc.garbageCollect();



                                        /* spa virtual temperature sensor c */
    doc[(_dev)] = devicedoc[(_dev)];
    payload.clear();
    topic = F(HA_PREFIX);
    topic += F("/sensor/");
    topic += mqttBaseTopic;
    topic += F("_virtualtemp_c/config");
    doc[(_name)] = mqttBaseTopic + F(" virtual temp (C)");
    doc[(_uniq_id)] = F("sensor.") + mqttBaseTopic + F("_virtual_temp_c")+mychipid;
    doc[(_stat_t)] = mqttBaseTopic+F("/message");
    doc[_unit_of_meas] = "°C";
    doc[(_val_tpl)] = F("{{ value_json.VTMC | round(2) }}");
    doc[_expire_after] = 700;
    doc[(_avty_t)] = mqttBaseTopic+F("/Status");
    doc[(_pl_avail)] = _alive;
    doc[(_pl_not_avail)] = _dead;
    doc[_dev_cla] = F("temperature");
    if (serializeJson(doc, payload) == 0)
    {
        // Serial.println(F("Failed to serialize vtc"));
        return;
    }
    mqttClient->publish(topic.c_str(), payload.c_str(), true);
    mqttClient->loop();
    // Serial.println(payload);
    doc.clear();
    doc.garbageCollect();



                                        /* spa target temperature sensor f */
    doc[(_dev)] = devicedoc[(_dev)];
    payload.clear();
    topic = F(HA_PREFIX);
    topic += F("/sensor/");
    topic += mqttBaseTopic;
    topic += F("_target_temp_f/config");
    doc[(_name)] = mqttBaseTopic + F(" target temp (F)");
    doc[(_uniq_id)] = F("sensor.") + mqttBaseTopic + F("_target_temp_f")+mychipid;
    doc[(_stat_t)] = mqttBaseTopic+F("/message");
    doc[_unit_of_meas] = "°F";
    doc[(_val_tpl)] = F("{{ value_json.TGTF }}");
    doc[_expire_after] = 700;
    doc[(_avty_t)] = mqttBaseTopic+F("/Status");
    doc[(_pl_avail)] = _alive;
    doc[(_pl_not_avail)] = _dead;
    doc[_dev_cla] = F("temperature");
    if (serializeJson(doc, payload) == 0)
    {
        // Serial.println(F("Failed to serialize tgtf!"));
        return;
    }
    mqttClient->publish(topic.c_str(), payload.c_str(), true);
    mqttClient->loop();
    // Serial.println(payload);
    doc.clear();
    doc.garbageCollect();

    


                                        /* spa target temperature sensor c */
    doc[(_dev)] = devicedoc[(_dev)];
    payload.clear();
    topic = F(HA_PREFIX);
    topic += F("/sensor/");
    topic += mqttBaseTopic;
    topic += F("_target_temp_c/config");
    doc[(_name)] = mqttBaseTopic + F(" target temp (C)");
    doc[(_uniq_id)] = F("sensor.") + mqttBaseTopic + F("_target_temp_c")+mychipid;
    doc[(_stat_t)] = mqttBaseTopic+F("/message");
    doc[_unit_of_meas] = "°C";
    doc[(_val_tpl)] = F("{{ value_json.TGTC }}");
    doc[_expire_after] = 700;
    doc[(_avty_t)] = mqttBaseTopic+F("/Status");
    doc[(_pl_avail)] = _alive;
    doc[(_pl_not_avail)] = _dead;
    doc[_dev_cla] = F("temperature");
    if (serializeJson(doc, payload) == 0)
    {
        // Serial.println(F("Failed to serialize tgt!"));
        return;
    }
    mqttClient->publish(topic.c_str(), payload.c_str(), true);
    mqttClient->loop();
    // Serial.println(payload);
    doc.clear();
    doc.garbageCollect();



                                        /* spa ambient temperature sensor c */
    doc[(_dev)] = devicedoc[(_dev)];
    payload.clear();
    topic = F(HA_PREFIX);
    topic += F("/sensor/");
    topic += mqttBaseTopic;
    topic += F("_amb_temp_c/config");
    doc[(_name)] = mqttBaseTopic + F(" ambient temp (C)");
    doc[(_uniq_id)] = F("sensor.") + mqttBaseTopic + F("_amb_temp_c")+mychipid;
    doc[(_stat_t)] = mqttBaseTopic+F("/message");
    doc[_unit_of_meas] = "°C";
    doc[(_val_tpl)] = F("{{ value_json.AMBC }}");
    doc[_expire_after] = 700;
    doc[(_avty_t)] = mqttBaseTopic+F("/Status");
    doc[(_pl_avail)] = _alive;
    doc[(_pl_not_avail)] = _dead;
    doc[_dev_cla] = F("temperature");
    if (serializeJson(doc, payload) == 0)
    {
        // Serial.println(F("Failed to serialize amb!"));
        return;
    }
    mqttClient->publish(topic.c_str(), payload.c_str(), true);
    mqttClient->loop();
    // Serial.println(payload);
    doc.clear();
    doc.garbageCollect();

        /******************/
        /* BINARY SENSORS */
        /******************/

        Serial.println("binary");


                                        /* spa lock binary_sensor */
    doc[(_dev)] = devicedoc[(_dev)];
    payload.clear();
    topic = F(HA_PREFIX);
    topic += F("/binary_sensor/");
    topic += mqttBaseTopic;
    topic += F("_lock/config");
    doc[_name] = mqttBaseTopic + F(" lock");
    doc[_uniq_id] = F("binary_sensor.") + mqttBaseTopic + F("_lock")+mychipid;
    doc[_stat_t] = mqttBaseTopic+F("/message");
    doc[_val_tpl] = F("{% if value_json.LCK == 1 %}OFF{% else %}ON{% endif %}");
    doc[_dev_cla] = F("lock");
    doc[_expire_after] = 700;
    doc[_avty_t] = mqttBaseTopic+F("/Status");
    doc[_pl_avail] = _alive;
    doc[_pl_not_avail] = _dead;
    if (serializeJson(doc, payload) == 0)
    {
        // Serial.println(F("Failed to serialize HA message!"));
        return;
    }
    mqttClient->publish(topic.c_str(), payload.c_str(), true);
    mqttClient->loop();
    // Serial.println(payload);
    doc.clear();
    doc.garbageCollect();



                                        /* spa heater binary_sensor */
    doc[(_dev)] = devicedoc[(_dev)];
    payload.clear();
    topic = F(HA_PREFIX);
    topic += F("/binary_sensor/");
    topic += mqttBaseTopic;
    topic += F("_heater/config");
    doc[(_name)] = mqttBaseTopic + F(" heater");
    doc[(_uniq_id)] = F("binary_sensor.") + mqttBaseTopic + F("_heater")+mychipid;
    doc[(_stat_t)] = mqttBaseTopic+F("/message");
    doc[(_val_tpl)] = F("{% if value_json.RED == 1 %}ON{% else %}OFF{% endif %}");
    doc[_dev_cla] = F("heat");
    doc[_expire_after] = 700;
    doc[(_avty_t)] = mqttBaseTopic+F("/Status");
    doc[(_pl_avail)] = _alive;
    doc[(_pl_not_avail)] = _dead;
    if (serializeJson(doc, payload) == 0)
    {
        // Serial.println(F("Failed to serialize HA message!"));
        return;
    }
    mqttClient->publish(topic.c_str(), payload.c_str(), true);
    mqttClient->loop();
    // Serial.println(payload);
    doc.clear();
    doc.garbageCollect();



                                        /* spa ready binary_sensor */
    doc[(_dev)] = devicedoc[(_dev)];
    payload.clear();
    topic = F(HA_PREFIX);
    topic += F("/binary_sensor/");
    topic += mqttBaseTopic;
    topic += F("_ready/config");
    doc[(_name)] = mqttBaseTopic + F(" ready");
    doc[(_uniq_id)] = F("binary_sensor.") + mqttBaseTopic + F("_ready")+mychipid;
    doc[(_stat_t)] = mqttBaseTopic+F("/message");
    doc[(_val_tpl)] = F("{% if value_json.TMP > 30 %}{% if value_json.TMP >= value_json.TGT-1 %}ON{% else %}OFF{% endif %}{% else %}OFF{% endif %}");
    doc[_expire_after] = 700;
    doc["icon"] = F("mdi:hot-tub");
    doc[(_avty_t)] = mqttBaseTopic+F("/Status");
    doc[(_pl_avail)] = _alive;
    doc[(_pl_not_avail)] = _dead;
    if (serializeJson(doc, payload) == 0)
    {
        // Serial.println(F("Failed to serialize HA message!"));
        return;
    }
    mqttClient->publish(topic.c_str(), payload.c_str(), true);
    mqttClient->loop();
    // Serial.println(payload);
    doc.clear();
    doc.garbageCollect();



                                        /* spa connection status binary_sensor */
    doc[(_dev)] = devicedoc[(_dev)];
    payload.clear();
    topic = F(HA_PREFIX);
    topic += F("/binary_sensor/");
    topic += mqttBaseTopic;
    topic += F("_connection/config");
    doc[(_name)] = mqttBaseTopic + F(" connection");
    doc[(_uniq_id)] = F("binary_sensor.") + mqttBaseTopic + F("_connection")+mychipid;
    doc[(_stat_t)] = mqttBaseTopic+F("/Status");
    doc[_dev_cla] = F("connectivity");
    doc[(_avty_t)] = mqttBaseTopic+F("/Status");
    doc[(_pl_avail)] = _alive;
    doc[(_pl_not_avail)] = _dead;
    doc["pl_on"] = _alive;
    doc["pl_off"] = _dead;
    if (serializeJson(doc, payload) == 0)
    {
        // Serial.println(F("Failed to serialize HA message!"));
        return;
    }
    mqttClient->publish(topic.c_str(), payload.c_str(), true);
    mqttClient->loop();
    // Serial.println(payload);
    doc.clear();
    doc.garbageCollect();


        /******************/
        /* SWITCHES       */
        /******************/

    Serial.println("switch");


                                        /* spa heat regulation switch */
    doc[(_dev)] = devicedoc[(_dev)];
    payload.clear();
    topic = F(HA_PREFIX);
    topic += F("/switch/");
    topic += mqttBaseTopic;
    topic += F("_heat_regulation/config");
    doc[(_name)] = mqttBaseTopic + F(" heat regulation");
    doc[(_uniq_id)] = F("switch.") + mqttBaseTopic + F("_heat_regulation")+mychipid;
    doc[(_stat_t)] = mqttBaseTopic+F("/message");
    doc[(_cmd_t)] = mqttBaseTopic+F("/command");
    doc[(_val_tpl)] = F("{% if value_json.RED == 1 %}1{% elif value_json.GRN == 1 %}1{% else %}0{% endif %}");
    doc[_expire_after] = 700;
    doc["icon"] = F("mdi:radiator");
    doc[(_avty_t)] = mqttBaseTopic+F("/Status");
    doc[(_pl_avail)] = _alive;
    doc[(_pl_not_avail)] = _dead;
    doc["pl_on"] = F("{CMD:3,VALUE:true,XTIME:0,INTERVAL:0}");
    doc["pl_off"] = F("{CMD:3,VALUE:false,XTIME:0,INTERVAL:0}");
    doc["state_on"] = 1;
    doc["state_off"] = 0;
    if (serializeJson(doc, payload) == 0)
    {
        // Serial.println(F("Failed to serialize HA message!"));
        return;
    }
    mqttClient->publish(topic.c_str(), payload.c_str(), true);
    mqttClient->loop();
    // Serial.println(payload);
    doc.clear();
    doc.garbageCollect();



                                    /* spa waterjets switch */
    doc[(_dev)] = devicedoc[(_dev)];
    payload.clear();
    topic = F(HA_PREFIX);
    topic += F("/switch/");
    topic += mqttBaseTopic;
    topic += F("_jets/config");
    doc[(_name)] = mqttBaseTopic + F(" jets");
    doc[(_uniq_id)] = F("switch.") + mqttBaseTopic + F("_jets")+mychipid;
    doc[(_stat_t)] = mqttBaseTopic+F("/message");
    doc[(_cmd_t)] = mqttBaseTopic+F("/command");
    doc[(_val_tpl)] = F("{{ value_json.HJT }}");
    doc[_expire_after] = 700;
    doc["icon"] = F("mdi:hydro-power");
    doc[(_avty_t)] = mqttBaseTopic+F("/Status");
    doc[(_pl_avail)] = _alive;
    doc[(_pl_not_avail)] = _dead;
    doc["pl_on"] = F("{CMD:11,VALUE:true,XTIME:0,INTERVAL:0}");
    doc["pl_off"] = F("{CMD:11,VALUE:false,XTIME:0,INTERVAL:0}");
    doc["state_on"] = 1;
    doc["state_off"] = 0;
    if (serializeJson(doc, payload) == 0)
    {
        // Serial.println(F("Failed to serialize HA message!"));
        return;
    }
    mqttClient->publish(topic.c_str(), payload.c_str(), true);
    mqttClient->loop();
    // Serial.println(payload);
    doc.clear();
    doc.garbageCollect();



                                        /* spa airbubbles switch */
    doc[(_dev)] = devicedoc[(_dev)];
    payload.clear();
    topic = F(HA_PREFIX);
    topic += F("/switch/");
    topic += mqttBaseTopic;
    topic += F("_airbubbles/config");
    doc[(_name)] = mqttBaseTopic + F(" airbubbles");
    doc[(_uniq_id)] = F("switch.") + mqttBaseTopic + F("_airbubbles")+mychipid;
    doc[(_stat_t)] = mqttBaseTopic+F("/message");
    doc[(_cmd_t)] = mqttBaseTopic+F("/command");
    doc[(_val_tpl)] = F("{{ value_json.AIR }}");
    doc[_expire_after] = 700;
    doc["icon"] = F("mdi:chart-bubble");
    doc[(_avty_t)] = mqttBaseTopic+F("/Status");
    doc[(_pl_avail)] = _alive;
    doc[(_pl_not_avail)] = _dead;
    doc["pl_on"] = F("{CMD:2,VALUE:true,XTIME:0,INTERVAL:0}");
    doc["pl_off"] = F("{CMD:2,VALUE:false,XTIME:0,INTERVAL:0}");
    doc["state_on"] = 1;
    doc["state_off"] = 0;
    if (serializeJson(doc, payload) == 0)
    {
        // Serial.println(F("Failed to serialize HA message!"));
        return;
    }
    mqttClient->publish(topic.c_str(), payload.c_str(), true);
    mqttClient->loop();
    // Serial.println(payload);
    doc.clear();
    doc.garbageCollect();



                                        /* spa pump switch */
    doc[(_dev)] = devicedoc[(_dev)];
    payload.clear();
    topic = F(HA_PREFIX);
    topic += F("/switch/");
    topic += mqttBaseTopic;
    topic += F("_pump/config");
    doc[(_name)] = mqttBaseTopic + F(" pump");
    doc[(_uniq_id)] = F("switch.") + mqttBaseTopic + F("_pump")+mychipid;
    doc[(_stat_t)] = mqttBaseTopic+F("/message");
    doc[(_cmd_t)] = mqttBaseTopic+F("/command");
    doc[(_val_tpl)] = F("{{ value_json.FLT }}");
    doc[_expire_after] = 700;
    doc["icon"] = F("mdi:pump");
    doc[(_avty_t)] = mqttBaseTopic+F("/Status");
    doc[(_pl_avail)] = _alive;
    doc[(_pl_not_avail)] = _dead;
    doc["pl_on"] = F("{CMD:4,VALUE:true,XTIME:0,INTERVAL:0}");
    doc["pl_off"] = F("{CMD:4,VALUE:false,XTIME:0,INTERVAL:0}");
    doc["state_on"] = 1;
    doc["state_off"] = 0;
    if (serializeJson(doc, payload) == 0)
    {
        // Serial.println(F("Failed to serialize HA message!"));
        return;
    }
    mqttClient->publish(topic.c_str(), payload.c_str(), true);
    mqttClient->loop();
    // Serial.println(payload);
    doc.clear();
    doc.garbageCollect();



                                        /* spa temperature unit switch */
    doc[(_dev)] = devicedoc[(_dev)];
    payload.clear();
    topic = F(HA_PREFIX);
    topic += F("/switch/");
    topic += mqttBaseTopic;
    topic += F("_temperature_unit/config");
    doc[(_name)] = mqttBaseTopic + F(" temperature unit F-C");
    doc[(_uniq_id)] = F("switch.") + mqttBaseTopic + F("_unit")+mychipid;
    doc[(_stat_t)] = mqttBaseTopic+F("/message");
    doc[(_cmd_t)] = mqttBaseTopic+F("/command");
    doc[(_val_tpl)] = F("{{ value_json.UNT }}");
    doc[_expire_after] = 700;
    doc["icon"] = F("mdi:circle-outline");
    doc[(_avty_t)] = mqttBaseTopic+F("/Status");
    doc[(_pl_avail)] = _alive;
    doc[(_pl_not_avail)] = _dead;
    doc["pl_on"] = F("{CMD:1,VALUE:true,XTIME:0,INTERVAL:0}");
    doc["pl_off"] = F("{CMD:1,VALUE:false,XTIME:0,INTERVAL:0}");
    doc["state_on"] = 1;
    doc["state_off"] = 0;
    if (serializeJson(doc, payload) == 0)
    {
        // Serial.println(F("Failed to serialize HA message!"));
        return;
    }
    mqttClient->publish(topic.c_str(), payload.c_str(), true);
    mqttClient->loop();
    // Serial.println(payload);
    doc.clear();
    doc.garbageCollect();



                                        /* spa take control switch */
    doc[(_dev)] = devicedoc[(_dev)];
    payload.clear();
    topic = F(HA_PREFIX);
    topic += F("/switch/");
    topic += mqttBaseTopic;
    topic += F("_take_ctrl/config");
    doc[(_name)] = mqttBaseTopic + F(" take control");
    doc[(_uniq_id)] = F("switch.") + mqttBaseTopic + F("_ctrl")+mychipid;
    doc[(_stat_t)] = mqttBaseTopic+F("/message");
    doc[(_cmd_t)] = mqttBaseTopic+F("/command");
    doc[(_val_tpl)] = F("{{ value_json.GOD }}");
    doc[_expire_after] = 700;
    doc["icon"] = F("mdi:steering");
    doc[(_avty_t)] = mqttBaseTopic+F("/Status");
    doc[(_pl_avail)] = _alive;
    doc[(_pl_not_avail)] = _dead;
    doc["pl_on"] = F("{CMD:17,VALUE:true,XTIME:0,INTERVAL:0}");
    doc["pl_off"] = F("{CMD:17,VALUE:false,XTIME:0,INTERVAL:0}");
    doc["state_on"] = 1;
    doc["state_off"] = 0;
    doc["assumed_state"] = 0; //get rid of lightning buttons
    if (serializeJson(doc, payload) == 0)
    {
        // Serial.println(F("Failed to serialize HA message!"));
        return;
    }
    mqttClient->publish(topic.c_str(), payload.c_str(), true);
    mqttClient->loop();
    // Serial.println(payload);
    doc.clear();
    doc.garbageCollect();


        /******************/
        /* BUTTONS        */
        /******************/

    Serial.println("buttons");


                                        /* spa reset chlorine timer button */
    doc[(_dev)] = devicedoc[(_dev)];
    payload.clear();
    topic = F(HA_PREFIX);
    topic += F("/button/");
    topic += mqttBaseTopic;
    topic += F("_reset_chlorine/config");
    doc[(_name)] = mqttBaseTopic + F(" reset chlorine timer");
    doc[(_uniq_id)] = F("button.") + mqttBaseTopic + F("_reset_chlorine")+mychipid;
    doc[(_cmd_t)] = mqttBaseTopic+F("/command");
    doc["payload_press"] = F("{CMD:9,VALUE:true,XTIME:0,INTERVAL:0}");
    doc["icon"] = F("mdi:restart");
    doc[(_avty_t)] = mqttBaseTopic+F("/Status");
    doc[(_pl_avail)] = _alive;
    doc[(_pl_not_avail)] = _dead;
    if (serializeJson(doc, payload) == 0)
    {
        // Serial.println(F("Failed to serialize HA message!"));
        return;
    }
    mqttClient->publish(topic.c_str(), payload.c_str(), true);
    mqttClient->loop();
    // Serial.println(payload);
    doc.clear();
    doc.garbageCollect();



                                        /* spa reset filter timer button */
    doc[(_dev)] = devicedoc[(_dev)];
    payload.clear();
    topic = F(HA_PREFIX);
    topic += F("/button/");
    topic += mqttBaseTopic;
    topic += F("_reset_filter/config");
    doc[(_name)] = mqttBaseTopic + F(" reset filter timer");
    doc[(_uniq_id)] = F("button.") + mqttBaseTopic + F("_reset_filter")+mychipid;
    doc[(_cmd_t)] = mqttBaseTopic+F("/command");
    doc["payload_press"] = F("{CMD:10,VALUE:true,XTIME:0,INTERVAL:0}");
    doc["icon"] = F("mdi:restart");
    doc[(_avty_t)] = mqttBaseTopic+F("/Status");
    doc[(_pl_avail)] = _alive;
    doc[(_pl_not_avail)] = _dead;
    if (serializeJson(doc, payload) == 0)
    {
        // Serial.println(F("Failed to serialize HA message!"));
        return;
    }
    mqttClient->publish(topic.c_str(), payload.c_str(), true);
    mqttClient->loop();
    // Serial.println(payload);
    doc.clear();
    doc.garbageCollect();



                                        /* spa restart esp button */
    doc[(_dev)] = devicedoc[(_dev)];
    payload.clear();
    topic = F(HA_PREFIX);
    topic += F("/button/");
    topic += mqttBaseTopic;
    topic += F("_restart_esp/config");
    doc[(_name)] = mqttBaseTopic + F(" restart esp");
    doc[(_uniq_id)] = F("button.") + mqttBaseTopic + F("_restart_esp")+mychipid;
    doc[(_cmd_t)] = mqttBaseTopic+F("/command");
    doc["payload_press"] = F("{CMD:6,VALUE:true,XTIME:0,INTERVAL:0}");
    doc["icon"] = F("mdi:restart");
    doc[_dev_cla] = F("restart");
    doc[(_avty_t)] = mqttBaseTopic+F("/Status");
    doc[(_pl_avail)] = _alive;
    doc[(_pl_not_avail)] = _dead;
    if (serializeJson(doc, payload) == 0)
    {
        // Serial.println(F("Failed to serialize HA message!"));
        return;
    }
    mqttClient->publish(topic.c_str(), payload.c_str(), true);
    mqttClient->loop();
    // Serial.println(payload);
    doc.clear();
    doc.garbageCollect();

    doc.clear();
    doc.garbageCollect();


        /****************/
        /* CLIMATE      */
        /****************/

    Serial.println("climate");

                                        /* spa climate control */

    doc[(_dev)] = devicedoc[(_dev)];
    payload.clear();
    topic = F(HA_PREFIX);
    topic += F("/climate/");
    topic += mqttBaseTopic;
    topic += F("_climate/config");
    doc[(_name)] = mqttBaseTopic + F(" temperature control");
    doc[(_uniq_id)] = F("climate.") + mqttBaseTopic + F("_climate")+mychipid;
    doc[_max_temp] = maxtemp;
    doc[_min_temp] = mintemp;
    doc[_precision] = 1.0;
    doc[_temp_unit] = "F";
    doc[_modes].add(serialized("\"fan_only\", \"off\", \"heat\""));
    doc[_mode_cmd_t] = mqttBaseTopic+F("/command_batch");
    doc[_mode_cmd_tpl] = F("[{CMD:3,VALUE:{%if value == \"heat\" %}1{% else %}0{% endif %},XTIME:0,INTERVAL:0},{CMD:4,VALUE:{%if value == \"fan_only\" %}1{% elif value == \"heat\" %}1{% else %}0{% endif %},XTIME:0,INTERVAL:0}]");
    doc[_mode_stat_t] = mqttBaseTopic+F("/message");
    doc[_mode_stat_tpl] = F("{% if value_json.RED == 1 %}heat{% elif value_json.GRN == 1 %}heat{% else %}off{% endif %}");
    doc[_act_t] = mqttBaseTopic+F("/message");
    doc[_act_tpl] = F("{% if value_json.RED == 1 %}heating{% elif value_json.GRN == 1 %}idle{% elif value_json.FLT == 1 %}fan{% else %}off{% endif %}");
    doc[_temp_stat_t] = mqttBaseTopic+F("/message");
    doc[_temp_stat_tpl] = F("{{ value_json.TGTF }}");
    doc[_curr_temp_t] = mqttBaseTopic+F("/message");
    doc[_curr_temp_tpl] = F("{{ value_json.TMPF }}");
    doc[_temp_cmd_t] = mqttBaseTopic+F("/command");
    doc[_temp_cmd_tpl] = F("{CMD:0,VALUE:{{ value|int }},XTIME:0,INTERVAL:0}");
    doc[(_avty_t)] = mqttBaseTopic+F("/Status");
    doc[(_pl_avail)] = _alive;
    doc[(_pl_not_avail)] = _dead;
    if (serializeJson(doc, payload) == 0)
    {
        // Serial.println(F("Failed to serialize climate"));
        return;
    }
    mqttClient->publish(topic.c_str(), payload.c_str(), true);
    mqttClient->loop();
    doc.clear();
    doc.garbageCollect();
    //   Serial.println(payload);
}

